import numpy as np
import matplotlib.pyplot as plt
from scipy.ndimage import convolve, generate_binary_structure
# Tamaño de la matriz
N = 16

# Inicialización aleatoria de la matriz
aleatorio = np.random.random((N, N))
matriz_n = np.zeros((N, N))
matriz_n[aleatorio >= 0.75] = 1
matriz_n[aleatorio < 0.75] = -1

aleatorio = np.random.random((N, N))
matriz_p = np.zeros((N, N))
matriz_p[aleatorio >= 0.25] = 1
matriz_p[aleatorio < 0.25] = -1

plt.imshow(matriz_p)

def energia(matriz):
    # Aplica la suma de vecinos más cercanos
    kernel = generate_binary_structure(2, 1)
    kernel[1][1] = False
    arr = -matriz * convolve(matriz, kernel, mode='constant', cval=0)
    return arr.sum()

energia(matriz_p)
def metropolis(spin_matriz, pasos, J, T, energia_inicial):
    spin_matriz = spin_matriz.copy()
    spins_red = np.zeros(pasos - 1)
    energia_red = np.zeros(pasos - 1)
    energia_actual = energia_inicial

    for t in range(pasos - 1):
        # 2. Selecciona un punto aleatorio en la matriz y cambia el espín
        x = np.random.randint(0, N)
        y = np.random.randint(0, N)
        spin_i = spin_matriz[x, y]  # Espín inicial
        spin_f = spin_i * -1  # Propuesto cambio de espín

        # Computa el cambio en la energía
        E_i = 0
        E_f = 0
        if x > 0:
            E_i += -spin_i * spin_matriz[x - 1, y]
            E_f += -spin_f * spin_matriz[x - 1, y]
        if x < N - 1:
            E_i += -spin_i * spin_matriz[x + 1, y]
            E_f += -spin_f * spin_matriz[x + 1, y]
        if y > 0:
            E_i += -spin_i * spin_matriz[x, y - 1]
            E_f += -spin_f * spin_matriz[x, y - 1]
        if y < N - 1:
            E_i += -spin_i * spin_matriz[x, y + 1]
            E_f += -spin_f * spin_matriz[x, y + 1]

        # 3/4. Cambia el estado con probabilidades designadas
        dE = E_f - E_i
        if (dE > 0) * (np.random.random() < np.exp(-dE / (J * T))):
            spin_matriz[x, y] = spin_f
            energia_actual += dE
        elif dE <= 0:
            spin_matriz[x, y] = spin_f
            energia_actual += dE

        spins_red[t] = spin_matriz.sum()
        energia_red[t] = energia_actual

    return spins_red, energia_red

spins, energias = metropolis(matriz_n, 100000, 1, 1, energia(matriz_n))


plt.figure(figsize=(12, 4))

plt.subplot(1, 2, 1)
plt.plot(spins / N**2)
plt.xlabel('Paso')
plt.ylabel('Magnetización Promedio')
plt.grid(True)

plt.subplot(1, 2, 2)
plt.plot(energias)
plt.xlabel('Paso')
plt.ylabel('Energía Promedio')
plt.grid(True)

plt.suptitle('Convergencia del Algoritmo de Metropolis', y=1.07, size=18)
plt.tight_layout()
plt.show()
def metropolis_np(spin_matriz, pasos, BJ, energia_inicial):
    spin_matriz = spin_matriz.copy()
    spins_red = np.zeros(pasos - 1)
    energia_red = np.zeros(pasos - 1)
    energia_actual = energia_inicial

    for t in range(pasos - 1):
        # 2. Selecciona un punto aleatorio en la matriz y cambia el espín
        x = np.random.randint(0, N)
        y = np.random.randint(0, N)
        spin_i = spin_matriz[x, y]  # Espín inicial
        spin_f = spin_i * -1  # Propuesto cambio de espín

        # Computa el cambio en la energía
        E_i = 0
        E_f = 0
        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            xn, yn = x + dx, y + dy
            if 0 <= xn < N and 0 <= yn < N:  # Ignora bordes
                E_i += -spin_i * spin_matriz[xn, yn]
                E_f += -spin_f * spin_matriz[xn, yn]

        # 3/4. Cambia el estado con probabilidades designadas
        dE = E_f - E_i
        if (dE > 0) * (np.random.random() < np.exp(-BJ * dE)):
            spin_matriz[x, y] = spin_f
            energia_actual += dE
        elif dE <= 0:
            spin_matriz[x, y] = spin_f
            energia_actual += dE

        spins_red[t] = spin_matriz.sum()
        energia_red[t] = energia_actual

    return spins_red, energia_red

spins, energias = metropolis_np(matriz_n, 1000000, 0.4, energia(matriz_n))
plt.figure(figsize=(12, 4))

plt.subplot(1, 2, 1)
plt.plot(spins / N**2)
plt.xlabel('Paso')
plt.ylabel('Magnetización Promedio')
plt.grid(True)

plt.subplot(1, 2, 2)
plt.plot(energias)
plt.xlabel('Paso')
plt.ylabel('Energía Promedio')
plt.grid(True)

plt.suptitle('Sistema Libre', y=1.07, size=18)
plt.tight_layout()
plt.show()